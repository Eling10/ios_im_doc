{"./":{"url":"./","title":"iOS客户端集成","keywords":"","body":"AAA "},"pages/import_sdk_pod.html":{"url":"pages/import_sdk_pod.html","title":"Pod导入SDK","keywords":"","body":"Cocoapods 导入 SDK 推荐使用 Cocoapods 集成 SDK。 Cocoapods 提供了一个简单的依赖管理系统，避免手动导入产生的错误。 在 Podfile 文件中，添加以下行： pod 'ElingIM' 进入到 Podfile 所在的目录，执行以下命令： pod install 执行完命令后，打开工程文件运行即可。 "},"pages/import_sdk_manual.html":{"url":"pages/import_sdk_manual.html","title":"手动导入SDK","keywords":"","body":"手动导入SDK 1.1 下载SDK 下载SDK，其中包括 libElingIM.a ELClient.h ELUserManager.h ELLoginManager.h ELChatManager.h ELGroupManager ELCallManager.h ELContactManager.h ELConversation.h ELMessage.h ELMessageBody.h ELTextMessageBody.h ELFileMessageBody.h ELImageMessageBody.h ELVoiceMessageBody.h ELVideoMessageBody.h ELCallMessageBody.h ELVideoCallMessageBody.h ELAudioCallMessageBody.h ELGroup.h ELUserInformation.h 1.2 导入SDK 将下载下来的库文件添加到工程的目录下，并勾选截图中标注的三项。 设置工程属性 向 Build Phases ➙ Link Binaries With Libraries 中添加SDK所依赖的库文件。 "},"pages/sdk_introduce.html":{"url":"pages/sdk_introduce.html","title":"SDK基本说明","keywords":"","body":"SDK基本说明 特别提示 SDK 只支持 iOS9 及以上系统版本。 不支持模拟器，只能在真机上运行。 核心类介绍 类 介绍 功能 ELClient 客户端 单例对象，负责整个SDK的初始化及IM相关的配置 ELUserManager 用户管理类 管理当前登录的用户信息 ELLoginManager 登录管理类 负责IM的注册、登录、登出相关的操作 ELChatManager 消息管理类 负责聊天相关的操作，支持单聊和群聊 ELGroupManager 群组管理类 管理与群相关的业务逻辑（查询、创建、解散、修改等） ELContactManager 联系人管理类 负责好友的查询、添加、删除等相关的逻辑 ELCallManager 音视频通话管理类 可以进行1v1的音视频通话 "},"pages/sdk_client.html":{"url":"pages/sdk_client.html","title":"客户端","keywords":"","body":"客户端 ELClient 1.1 初始化 引入相关头文件。 在工程的 AppDelegate 中调用 SDK 对应的方法。 #import \"ELClient.h\" - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { /// 客户端相关配置 ELClientOptions *o = [ELClientOptions new]; o.appId = @\"您应用的AppId\"; o.appSecret = @\"您应用的AppSecret\"; /// IM服务相关的配置 ELIMOptions *imO = [ELClient sharedClient].imOptions; imO.serverURL = @\"\"; imO.imURL = @\"\"; imO.chatRoomURL = @\"\"; imO.voipURL = @\"\"; /// 初始化 SDK 客户端 [[ELClient sharedClient] initializeSDKWithOptions:o]; return YES; } 1.2 配置类 ELClientOptions 客户端配置类，在初始化SDK的时候传入的配置。 属性 类型 描述 appId NSString 应用的 AppId appSecret NSString 应用的 AppSecret 注：AppId 与 AppSecret 是您在平台上创建应用时生成的标识，参考：开发者注册及管理后台。 ELIMOptions IM服务配置类，配置与IM相关的服务器地址。 属性 类型 描述 serverURL NSString SDK服务器地址 imURL NSString 消息服务的地址 chatRoomURL NSString 聊天室服务的地址 voipURL NSString 音视频服务的地址 ELOSSOptions 阿里云OSS配置类，消息中的附件（音频、视频、图片等）是存储在阿里云OSS服务器上的。 属性 类型 描述 bucketName NSString 默认：celery-master endPoint NSString 默认：http://oss-cn-shenzhen.aliyuncs.com/ directoryName NSString 服务器上存储文件的一级目录名，默认：starRtc fileDirectoryName NSString 文件目录名（二级目录），默认：file imageDirectoryName NSString 图片目录名（二级目录），默认：images voiceDirectoryName NSString 语音目录名（二级目录），默认：voice videoDirectoryName NSString 视频目录名（二级目录），默认：video 1.3 API介绍 获取 SKD 实例 /** * 获取 SKD 实例 */ + (instancetype)sharedClient; /// 调用 ELClient *client = [ELClient sharedClient]; 初始化 SDK /** * 初始化 SDK，启动App时需要调用此方法 * * @param options 配置选项 */ - (void)initializeSDKWithOptions:(ELClientOptions *)options; /// 调用 [[ELClient sharedClient] initializeSDKWithOptions:o]; "},"pages/sdk_login.html":{"url":"pages/sdk_login.html","title":"登录管理","keywords":"","body":" 登录 ELLoginManager 登录管理类，负责IM用户的注册、登录、登出以及监听登录状态相关的逻辑。 协议 ELLoginManagerDelegate 监听登录状态的协议 /** * 连接状态发生改变的回调 * * @param state 状态 */ - (void)connectionStateDidChange:(ELConnectionState)state; /** 登录状态失效的回调 */ - (void)loginStatusDidInvalid; API介绍 获取登录管理实例 SDK内部已经将登录管理对象挂载到客户端实例上，因此外部无需再实例化登录管理类，直接通过客户端实例来获取。 /// 获取登录实例 ELLoginManager *login = [ELClient sharedClient].loginManager; 用户注册 /** * 用户注册 * * @param username 用户名 * @param password 密码（6~18位，字母+数字组合） * @param aCompletionBlock 完成的回调 */ - (void)registerWithUsername:(NSString *)username password:(NSString *)password completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].loginManager registerWithUsername:self.phoneF.text password:self.passwordF.text completion:^(NSError *aError) { if (aError) { NSLog(@\"注册失败\"); } else { NSLog(@\"注册成功\"); } }]; 注：SDK对注册用户的 密码 做了限制，密码长度在 6~18 位之间，并且只能是 数字 + 字母 的组合。 登录IM服务器 登录成功后，用户信息会被缓存在本地，可以通过 ELUserManager 类来获取当前登录的用户信息。 /** * 用户登录 * * @param username 用户名 * @param password 密码（6~18位，字母+数字组合） * @param aCompletionBlock 完成的回调 */ - (void)loginWithUsername:(NSString *)username password:(NSString *)password completion:(void (^)(NSString *userId, NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].loginManager loginWithUsername:@\"abc\" password:@\"abc123\" completion:^(NSString *userId, NSError *aError) { if (aError) { NSLog(@\"登录失败\"); } else { NSLog(@\"登录成功\"); } }]; 登出 退出登录后，SDK会清空缓存在本地的用户数据。 /** * 退出登录 * * @param aCompletionBlock 回调 */ - (void)logout:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].loginManager logout:^(NSError *aError) { if (aError) { NSLog(@\"退出失败\"); } else { NSLog(@\"退出成功\"); } }]; 监听登录状态 /// 添加代理 - (void)addDelegate:(id)delegate; /// 移除代理 - (void)removeDelegate:(id)delegate; /// 调用 [[ELClient sharedClient].loginManager addDelegate:self]; [[ELClient sharedClient].loginManager removeDelegate:self]; "},"pages/sdk_user.html":{"url":"pages/sdk_user.html","title":"用户管理","keywords":"","body":"用户管理 ELUserManager 管理当前登录用户相关的信息 API介绍 获取当前登录用户 /// 当前登录用户 @property (strong, nonatomic) ELUserInformation *currentUser; /// 调用 ELUserInformation *currentUser = [ELClient sharedClient].userManager.currentUser; 清空当前登录用户的缓存 当用户退出登录或者登录失效后，SDK内部会自动调用此方法来清除本地的用户数据，外部不应该主动调用此方法。 /// 清空当前登录的用户（缓存的数据会被移除） - (void)clearCurrentUser; /// 调用 [[ELClient sharedClient].userManager clearCurrentUser]; 获取指定用户信息 此方法是用来获取指定用户的信息 /** * 获取用户信息 * * @param userId 用户ID * @param aCompletionBlock 回调 */ - (void)getUserInformation:(NSString *)userId completion:(void(^)(NSError *error, ELUserInformation *information))aCompletionBlock; /// 调用 [[ELClient sharedClient].userManager getUserInformation:@\"zhangsan\" completion:^(NSError *error, ELUserInformation *information) { if (!error) { NSLog(@\"请求成功\"); } else { NSLog(@\"请求成功\"); } }]; 修改当前用户信息 /** * 修改用户信息 * * @param avatar 头像地址（传 nil 则不做修改） * @param nickName 昵称（传 nil 则不做修改） * @param aCompletionBlock 回调 */ - (void)updateUserInformationWithAvatar:(NSString *)avatar nickName:(NSString *)nickName completion:(void(^)(NSError *error))aCompletionBlock; /// 调用 [[ELClient sharedClient].userManager updateUserInformationWithAvatar:nil nickName:@\"zhangsan\" completion:^(NSError *error) { if (!error) { NSLog(@\"修改成功\"); } else { NSLog(@\"修改失败\"); } }]; 发送邮箱验证码 /** * 验证码类型 */ typedef NS_ENUM(NSUInteger, ELVerificationCodeType) { /// IM修改密码 ELVerificationCodeTypeUpdatePassword = 4, /// 绑定邮箱 ELVerificationCodeTypeBindEmail = 6 }; /** * 发送邮箱验证码 * * @param email 邮箱 * @param type 验证码类型 * @param aCompletionBlock 回调 */ - (void)sendCodeToEmail:(NSString *)email type:(ELVerificationCodeType)type completion:(void(^)(NSError *error))aCompletionBlock; /// 调用 /// 发送邮箱验证码 - 绑定邮箱 [[ELClient sharedClient].userManager sendCodeToEmail:@\"xxx@xxx.com\" type:ELVerificationCodeTypeBindEmail completion:^(NSError *error) {}]; /// 发送邮箱验证码 - 修改密码 [[ELClient sharedClient].userManager sendCodeToEmail:@\"xxx@xxx.com\" type:ELVerificationCodeTypeUpdatePassword completion:^(NSError *error) {}]; 注：绑定邮箱 或者 修改密码 时，需要先调用此API来获取对应的验证码。 绑定邮箱 /** * 绑定邮箱 * * @param email 邮箱地址 * @param code 邮箱验证码 * @param aCompletionBlock 回调 */ - (void)bindEmail:(NSString *)email code:(NSString *)code completion:(void(^)(NSError *error))aCompletionBlock; /// 调用 [[ELClient sharedClient].userManager bindEmail:@\"xxx@xxx.com\" code:@\"8888\" completion:^(NSError *error) {}]; 修改密码 /** * 修改密码 * * @param newPassword 新密码（6~18位，字母+数字组合） * @param account 账号 * @param code 邮箱验证码 * @param aCompletionBlock 回调 */ - (void)updatePassword:(NSString *)newPassword account:(NSString *)account code:(NSString *)code completion:(void(^)(NSError *error))aCompletionBlock; /// 调用 [[ELClient sharedClient].userManager updatePassword:@\"abc123\" account:@\"zhangsan\" code:@\"8888\" completion:^(NSError *error) {}]; "},"pages/sdk_contact.html":{"url":"pages/sdk_contact.html","title":"好友管理","keywords":"","body":"好友管理 ELContactManager 管理好友的基本功能，比如添加、移除代理，添加、删除好友等。 SDK对于非好友关系的双方是不能进行单聊的。 协议 ELContactManagerDelegate 好友管理类的代理，用来监听接收好友请求、删除等回调。 /** * 用户B同意用户A的加好友请求后，用户A会收到这个回调 * * @param userId 用户B */ - (void)friendRequestDidApproveByUser:(NSString *)userId; /** * 用户B申请加A为好友后，用户A会收到这个回调 * * @param userId 用户B * @param message 消息 */ - (void)friendRequestDidReceiveFromUser:(NSString *)userId message:(NSString *)message; /** * 用户A解除与用户B的好友关系后，用户B会收到这个回调 * * @param userId 用户A */ - (void)friendDidRemoveByUser:(NSString *)userId; API介绍 获取好友列表 /** * 获取好友列表 * * @param aCompletionBlock 完成的回调 */ - (void)getContactsWithCompletion:(void (^)(NSArray *aList, NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].contactManager getContactsWithCompletion:^(NSArray *aList, NSError *aError) {}]; 注：好友数据都是从服务器上获取的，SDK内部不会对好友数据做存储。 查找联系人 /** * 搜索联系人 * * @param username 用户名 * @param aCompletionBlock 完成的回调 */ - (void)searchContactWithUsername:(NSString *)username completion:(void (^)(NSArray *aList, NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].contactManager searchContactWithUsername:@\"zhangsan\" completion:^(NSArray *aList, NSError *aError) {}]; 添加好友 /** * 添加好友 * * @param userId 用户ID * @param aMessage 邀请信息 */ - (void)addContact:(NSString *)userId message:(NSString *)aMessage completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].contactManager addContact:@\"zhangsan\" message:text completion:^(NSError *aError) {}]; 删除好友 好友删除成功后，会删除与该好友之间的会话数据。 /** * 删除好友 * * @param userId 用户ID */ - (void)deleteContact:(NSString *)userId completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].contactManager deleteContact:@\"zhangsan\" completion:^(NSError *aError) {}]; 同意好友申请 /** * 同意好友申请 * * @param userId 用户ID */ - (void)approveFriendRequestFromUser:(NSString *)userId completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].contactManager approveFriendRequestFromUser:@\"zhangsan\" completion:^(NSError *aError) {}]; 添加好友管理代理 /// 添加代理 - (void)addDelegate:(id)aDelegate; /// 移除代理 - (void)removeDelegate:(id)aDelegate; /// 调用 [[ELClient sharedClient].contactManager addDelegate:self]; [[ELClient sharedClient].contactManager removeDelegate:self]; "},"pages/sdk_chat.html":{"url":"pages/sdk_chat.html","title":"消息管理","keywords":"","body":"消息管理 ELChatManager 管理所有与聊天相关的逻辑，包括单聊和群聊消息的查询、发送、更新、删除的功能。 消息 ELMessage 消息：IM 交互的实体，由消息体（ ELMessageBody ）组成，目前的消息体的类型有：文本消息、图片消息、文件消息、语音消息、视频消息、音频通话、视频通话。 /** * 初始化消息实例 * * @param conversationId 会话ID（接收方的ID） * @param toName 接收方名称 * @param toAvatar 接收方头像 * @param body 消息体 * @param ext 拓展信息 */ - (instancetype)initWithConversationId:(NSString *)conversationId toName:(NSString *)toName toAvatar:(NSString *)toAvatar body:(ELMessageBody *)body ext:(NSDictionary *)ext; conversationId：会话 id，消息接收方的 id。如果是单聊，会话 id 就是对方的 userId，如果是群聊，会话 id 就是群的 groupId。 构造文本消息 /// 调用 ELTextMessageBody *body = [ELTextMessageBody new]; body.text = @\"要发送的消息\"; /// 生成消息 ELMessage *message = [[ELMessage alloc] initWithConversationId:@\"001\" toName:@\"zhangsan\" toAvatar:nil body:body ext:nil]; // 单聊 message.chatType = ELChatTypeChat; // 群聊 // message.chatType = ELChatTypeGroupChat; 构造图片消息 /*! * 初始化文件消息体（数据将会写入本地） * * @param aData 附件数据 * @param aDisplayName 附件显示名（不包含路径） * * @result 消息体实例 */ - (instancetype)initWithData:(NSData *)aData displayName:(NSString *)aDisplayName; /// 调用 ELImageMessageBody *body = [[ELImageMessageBody alloc] initWithData:aData displayName:@\"image.png\"]; /// 生成消息 ELMessage *message = [[ELMessage alloc] initWithConversationId:@\"001\" toName:@\"zhangsan\" toAvatar:nil body:body ext:nil]; // 单聊 message.chatType = ELChatTypeChat; // 群聊 // message.chatType = ELChatTypeGroupChat; 构造语音消息 /*! * 初始化文件消息体 * * @param aLocalPath 附件本地路径 * @param aDisplayName 附件显示名（不包含路径） * * @result 消息体实例 */ - (instancetype)initWithLocalPath:(NSString *)aLocalPath displayName:(NSString *)aDisplayName; /// 调用 ELVoiceMessageBody *body = [[ELVoiceMessageBody alloc] initWithLocalPath:@\"xxx/xxx.amr\" displayName:@\"audio\"]; // 语音时长，10 秒 body.duration = 10; /// 生成消息 ELMessage *message = [[ELMessage alloc] initWithConversationId:@\"001\" toName:@\"zhangsan\" toAvatar:nil body:body ext:nil]; // 单聊 message.chatType = ELChatTypeChat; // 群聊 // message.chatType = ELChatTypeGroupChat; 构造视频消息 /*! * 初始化文件消息体 * * @param aLocalPath 附件本地路径 * @param aDisplayName 附件显示名（不包含路径） * * @result 消息体实例 */ - (instancetype)initWithLocalPath:(NSString *)aLocalPath displayName:(NSString *)aDisplayName; /// 调用 ELVideoMessageBody *body = [[ELVideoMessageBody alloc] initWithLocalPath:@\"xxx/xxx.mp4\" displayName:@\"video.mp4\"]; /// 生成消息 ELMessage *message = [[ELMessage alloc] initWithConversationId:@\"001\" toName:@\"zhangsan\" toAvatar:nil body:body ext:nil]; // 单聊 message.chatType = ELChatTypeChat; // 群聊 // message.chatType = ELChatTypeGroupChat; 构造音频通话消息 /// 调用 ELAudioCallMessageBody *body = [ELAudioCallMessageBody new]; // 通话结束的原因 body.reason = ELCallEndReasonHangup; // 通话时长 body.duration = 10; /// 生成消息 ELMessage *message = [[ELMessage alloc] initWithConversationId:@\"001\" toName:@\"zhangsan\" toAvatar:nil body:body ext:nil]; // 单聊 message.chatType = ELChatTypeChat; // 群聊 // message.chatType = ELChatTypeGroupChat; 构造视频通话消息 /// 调用 ELVideoCallMessageBody *body = [ELVideoCallMessageBody new]; // 通话结束的原因 body.reason = ELCallEndReasonHangup; // 通话时长 body.duration = 10; /// 生成消息 ELMessage *message = [[ELMessage alloc] initWithConversationId:@\"001\" toName:@\"zhangsan\" toAvatar:nil body:body ext:nil]; // 单聊 message.chatType = ELChatTypeChat; // 群聊 // message.chatType = ELChatTypeGroupChat; 获取历史消息 /** * 获取指定会话的消息，如果数据库中不存在，则从服务器中取，按时间顺序 升序 排列（服务器中的数据会同步到本地数据库） * * @param conversationId 会话ID * @param page 第几页（从 1 开始） * @param size 每页显示的条数 */ - (void)getMessages:(NSString *)conversationId page:(NSInteger)page size:(NSInteger)size completion:(void(^)(NSArray *messages, NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].chatManager getMessages:@\"001\" page:1 size:10 completion:^(NSArray *messages, NSError *aError) {}]; 删除单条消息 /** * 删除某一条消息记录，数据将会从服务器和本地数据库中移除 * * @param messageId 消息ID * @param aCompletionBlock 完成的回调（回调结果以本地数据库的操作结果为准） */ - (void)removeMessage:(NSString *)messageId completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].chatManager removeMessages:@\"001\" completion:^(NSError *aError) {}]; 删除多条消息 /** * 删除某一条会话下的所有消息（会话记录不会被删除），数据将会从服务器和本地数据库中移除 * * @param conversationId 会话ID * @param aCompletionBlock 完成的回调（回调结果以本地数据库的操作结果为准） */ - (void)removeMessages:(NSString *)conversationId completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].chatManager removeMessages:@\"001\" completion:^(NSError *aError) {}]; 会话 ELConversation 会话：操作聊天消息 ELMessage 的容器，SDK 内部会对消息进行分类，将 conversationId 相同的消息归为一类，作为一条会话。每条会话中存储了最新的一条消息，以及该会话下所有未读消息的数量。 获取会话列表 /** * 获取当前用户的所有会话数据，会按照最新的那一条消息进行 降序 排列（聊天室的会话除外） */ - (void)getAllConversations:(void(^)(NSArray *conversations, NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].chatManager getAllConversations:^(NSArray *conversations, NSError *aError) {}]; 注：会话列表中不包含聊天室的会话消息。 删除会话 当会话被删除后，它底下的所有消息数据都会被删除。 /** * 删除某一条会话（同时会清空该会话中的所有消息记录），数据将会从服务器和本地数据库中移除 * * @param conversationId 会话ID * @param aCompletionBlock 完成的回调（回调结果以本地数据库的操作结果为准） */ - (void)removeConversation:(NSString *)conversationId completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].chatManager removeConversation:@\"001\" completion:^(NSError *aError) {}]; 获取单个会话的未读消息数 ELConversation *conversation = self.conversations[0]; // 未读数 NSInteger unreadMessagesCount = conversation.unreadMessagesCount; 获取所有会话的未读消息数 [[ELClient sharedClient].chatManager getAllConversations:^(NSArray *conversations, NSError *aError) { NSInteger unreadCount = 0; for (ELConversation *conversation in conversations) { unreadCount += conversation.unreadMessagesCount; } }]; 查询会话是否是好友会话 对于单聊而言，聊天双方必须是好友关系，才能进行聊天。 /** * 查询该会话是否是好友会话（只针对单聊） * * @param conversationId 会话ID */ - (void)getConversationFriendStatus:(NSString *)conversationId completion:(void (^)(BOOL isFriend, NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].chatManager getConversationFriendStatus:self.conversation.conversationId completion:^(BOOL isFriend, NSError *aError) { }]; 聊天 登录成功之后才能进行聊天操作。发消息时，单聊和群聊调用的是统一接口，区别只是消息的 chatType 不同。 发送消息 发送消息时，对于带附件的消息体（图片、语音、视频等），SDK 内部会自动将附件上传到服务器上。 /** * 发送消息，SDK内部会自动上传消息的附件（图片、视频、语音、文件） * * @param aMessage 消息实例 * @param aCompletionBlock 完成的回调 */ - (void)sendMessage:(ELMessage *)aMessage completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].chatManager sendMessage:message completion:^(NSError *aError) {}]; 接收消息 协议：ELChatManagerDelegate /** * 收到一条消息，消息会被写入数据库，对于图片、语音、视频、文件类的消息，文件数据会被缓存到本地 * * @param aMessages 消息 */ - (void)messageDidReceive:(ELMessage *)aMessages; 代理： // 添加代理 [[ELClient sharedClient].chatManager addDelegate:self]; // 移除代理 [[ELClient sharedClient].chatManager removeDelegate:self]; 上传消息附件 发送消息时，SDK 内部会自动上传消息的附件。如果不是特殊情况，外界不需要调用此方法。 /** * 上传附件到到服务器，上传完成后会同步更新 aMesage 对象 * * @param aMessage 消息对象 * @param progress 进度 * @param aCompletionBlock 回调 */ - (void)uploadMessageAttachment:(ELMessage *)aMessage progress:(ELFileProgressBlock)progress completion:(void (^)(NSError *error))aCompletionBlock; /// 调用 [[ELClient sharedClient].chatManager uploadMessageAttachment:message progress:nil completion:^(NSError *error) {}]; 下载消息附件 /** * 下载消息附件（语音，视频、文件），下载完成后会同步更新 aMesage 对象 * * @param aMessage 消息对象 * @param progress 进度 * @param aCompletionBlock 下载完成的回调 */ - (void)downloadMessageAttachment:(ELMessage *)aMessage progress:(ELFileProgressBlock)progress completion:(void (^)(NSError *error))aCompletionBlock; /// 调用 [[ELClient sharedClient].chatManager downloadMessageAttachment:message progress:nil completion:^(NSError *error) {}]; "},"pages/sdk_group.html":{"url":"pages/sdk_group.html","title":"群组管理","keywords":"","body":"群管理 ELGroupManager 群实例 ELGroup 属性 类型 描述 groupId NSString 群id groupName NSString 群名称 owner NSString 群主id groupAvatar NSString 群头像 memberList ELUserInformation 群成员列表（包括群主） 协议 ELGroupManagerDelegate 群管理协议，用于监听群操作的回调。 /** * 当群被解散的通知，所有群成员会收到此回调（群主除外） * * @param groupId 群ID */ - (void)groupDidDissolution:(NSString *)groupId; /** * 自己被移出群组的通知（自己主动退群，不会收到此回调） * * @param aGroupId 群组ID */ - (void)userDidDeleteFromGroup:(NSString *)aGroupId; /** * 用户主动退群的通知（只有群主会收到此回调） * * @param aGroupId 群组ID */ - (void)userDidLeaveFromGroup:(NSString *)aGroupId; API介绍 获取群列表 /** * 获取用户已加入的群组 * * @param aCompletionBlock 完成的回调 */ - (void)getGroups:(void (^)(NSArray *aList, NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].groupManager getGroups:^(NSArray *aList, NSError *aError) {}]; 查询群详情 /** * 获取群组详情信息 * * @param aGroupId 群组ID * @param aCompletionBlock 完成的回调 */ - (void)getGroupDetailWithId:(NSString *)aGroupId completion:(void (^)(ELGroup *group, NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].groupManager getGroupDetailWithId:@\"001\" completion:^(ELGroup *group, NSError *aError) { }]; 创建群组 /** * 创建群组 * * @param groupName 群组名称（最多20位字符长度） * @param aCompletionBlock 完成的回调 */ - (void)createGroupWithGroupName:(NSString *)groupName completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].groupManager createGroupWithGroupName:@\"group01\" completion:^(NSError *aError) {}]; 注：群名称的字符长度 SDK 内部做了限制，必须在 20 个字符以内（包括 20 个字符）。 退出群组 /** * 退出群组，owner不能退出群，只能解散群（数据库中与本群相关的会话数据会被清除） * * @param aGroupId 群组ID * @param aCompletionBlock 完成的回调 */ - (void)leaveGroup:(NSString *)aGroupId completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].groupManager leaveGroup:@\"001\" completion:^(NSError *aError) {}]; 注：只有群成员可以退群，群主不能退群，只能解散群。操作成功后，SDK 内部会删除与本群相关的会话数据。 解散群组 /** * 解散群组, 需要owner权限（数据库中与本群相关的会话数据会被清除） * * @param aGroupId 群组ID * @param aCompletionBlock 完成的回调 */ - (void)destroyGroup:(NSString *)aGroupId completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].groupManager destroyGroup:@\"001\" completion:^(NSError *aError) { }]; 注：只能群主有权限解散群。群被解散后，群内的所有成员（群主除外）都会收到通知，同时 SDK 内部会删除与本群相关的会话数据。 添加群成员 /** * 添加群组成员 * * @param aUsers 被邀请的用户名列表 * @param aGroupId 群组ID * @param aCompletionBlock 完成的回调 */ - (void)addMembers:(NSArray *)aUsers toGroup:(NSString *)aGroupId completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].groupManager addMembers:memberList toGroup:@\"001\" completion:^(NSError *aError) {}]; 删除群成员 /** * 将群成员移出群组, 需要owner权限 * * @param aUsers 要移出群组的用户列表 * @param aGroupId 群组ID * @param aCompletionBlock 完成的回调 */ - (void)removeMembers:(NSArray *)aUsers fromGroup:(NSString *)aGroupId completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].groupManager removeMembers:memberList fromGroup:@\"001\" completion:^(NSError *aError) {}]; 注：只有群主有权限删除群成员，且群主不能删除自己。 修改群信息 /** * 修改群信息（群名称、头像），传空则表示不修改此项 * * @param aGroupId 群组ID * @param aGroupName 群名称 * @param aGroupAvatar 群头像 * @param aCompletionBlock 完成的回调 */ - (void)updateGroupWithId:(NSString *)aGroupId name:(NSString *)aGroupName avatar:(NSString *)aGroupAvatar completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].groupManager updateGroupWithId:@\"001\" name:@\"group02\" avatar:nil completion:^(NSError *aError) {}]; 注：只有群主有权限修改群信息。 添加群组管理代理 /// 添加代理 - (void)addDelegate:(id)aDelegate; /// 移除代理 - (void)removeDelegate:(id)aDelegate; /// 调用 [[ELClient sharedClient].groupManager addDelegate:self]; [[ELClient sharedClient].groupManager removeDelegate:self]; "}}