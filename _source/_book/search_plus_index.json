{"./":{"url":"./","title":"iOS客户端集成","keywords":"","body":"概述 欢迎使用 ElingIM。 ElingIM 即时通讯是深圳壹零后信息技术有限公司为开发者提供的基于移动互联网的即时通讯能力，支持单聊、群聊、发语音、发图片、发视频、实时音频、实时视频等，让开发者摆脱繁重的移动 IM 通讯底层开发。 功能 【即时通信】支持数亿终端同时在线，单机（4核8G）可支持50万人同时在线。 【实时通话】P2P无缝传输，通话延时低至150ms。 特点 IM消息系统集群支持上亿并发，支持横向扩展！ 音视频超低延时，自适应回音消除业内领先！ 服务器兼容，轻松应对大量连接！ Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-05-18 "},"pages/app_register.html":{"url":"pages/app_register.html","title":"注册并创建应用","keywords":"","body":"注册并创建应用 注册开发者账号 第一步：进入 ElingIM 开发者注册及管理后台，点击 “注册”，进入开发者管理后台注册页面。 第二步：在注册页面中，先填入邮箱，然后点击 “发送验证码”，我们会向您填写的邮箱中发送验证码。输入您收到的验证码并设置好密码，然后点击 “注册” 按钮，即可完成注册。 创建应用 注册成功后，回到控制台登录页面，然后登录到开发者后台。 第一步：点击 “创建应用” 按钮，如下图： 第二步：填写创建应用的相关信息，如下图： 注：Bundle ID 是您项目中的 Bundle Identifier，用来唯一标识一个 App。此处填写的是 \"Explicit App ID\"，不可带通配符。建议填写反向域名风格的字符串。 第三步：填写完应用信息后，点击 “创建” 按钮。应用创建成功后，系统会为您生成 appid 、appSecret 以及相关配置信息，如下图： Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-05-26 "},"pages/import_sdk_pod.html":{"url":"pages/import_sdk_pod.html","title":"Pod导入SDK","keywords":"","body":"Cocoapods 导入 SDK 推荐使用 Cocoapods 集成 SDK。 Cocoapods 提供了一个简单的依赖管理系统，避免手动导入产生的错误。 在 Podfile 文件中，添加以下行： pod 'ElingIM' 进入到 Podfile 所在的目录，执行以下命令： pod install 执行完命令后，打开工程文件运行即可。 Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-05-09 "},"pages/import_sdk_manual.html":{"url":"pages/import_sdk_manual.html","title":"手动导入SDK","keywords":"","body":"手动导入SDK 1.1 下载SDK 下载SDK ，其中包括 ElingIM.h ElingIM.framework 1.2 导入SDK 添加到项目中 将下载下来的库文件添加到工程的目录下，并勾选截图中标注的三项。 设置工程属性 向 Build Phases ➙ Link Binaries With Libraries 中添加SDK所依赖的库文件。 设置 Building Settings ➙ Enable Bitcode 为 NO。 向 Building Settings ➙ Other Linker Flags 中添加 -all_load 或 -force_load 选项。 修改项目架构。设置 Building Settings ➙ Valid Architectures 为 arm64 arm64e。 添加 SDK 所依赖的第三方 pod 库。 在项目的 Podfile 文件中添加以下行： pod 'XCMacros', '~> 1.0.5' pod 'FMDB', '~> 2.7.5' pod 'MJExtension', '~> 3.2.1' pod 'AliyunOSSiOS', '~> 2.10.8' pod 'XCDateUnit', '~> 0.0.5' pod 'XCApplicationHelper', '~> 0.0.1' pod 'XCCategory', '~> 1.0.8' 进入到 Podfile 所在的目录，执行以下命令： pod install 执行完命令后，打开工程文件运行即可。 Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-05-21 "},"pages/sdk_introduce.html":{"url":"pages/sdk_introduce.html","title":"SDK基本说明","keywords":"","body":"SDK基本说明 特别提示 SDK 只支持 iOS9 及以上系统版本。 不支持模拟器，只能在真机上运行。 SDK 移除了 32 位的处理器，只能运行在 64 位（arm64 、 arm64e）的处理器上，即：iphone5s 及以后的机型。 核心类介绍 类 介绍 功能 ELClient 客户端 单例对象，负责整个SDK的初始化及IM相关的配置 ELUserManager 用户管理类 管理当前登录的用户信息 ELLoginManager 登录管理类 负责IM的注册、登录、登出相关的操作 ELChatManager 消息管理类 负责聊天相关的操作，支持单聊和群聊 ELGroupManager 群组管理类 管理与群相关的业务逻辑（查询、创建、解散、修改等） ELContactManager 联系人管理类 负责好友的查询、添加、删除等相关的逻辑 ELCallManager 音视频通话管理类 可以进行1v1的音视频通话 Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-05-20 "},"pages/sdk_client.html":{"url":"pages/sdk_client.html","title":"客户端","keywords":"","body":"客户端 ELClient 1.1 初始化 引入相关头文件。 在工程的 AppDelegate 中调用 SDK 对应的方法。 #import \"ELClient.h\" - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { /// 客户端相关配置 ELClientOptions *o = [ELClientOptions new]; o.appId = @\"您应用的AppId\"; o.appSecret = @\"您应用的AppSecret\"; /// 初始化 SDK 客户端 [[ELClient sharedClient] initializeSDKWithOptions:o]; return YES; } 1.2 配置类 ELClientOptions 客户端配置类，在初始化SDK的时候传入的配置。 属性 类型 描述 appId NSString 应用的 AppId appSecret NSString 应用的 AppSecret 注：AppId 与 AppSecret 是您在平台上创建应用时生成的应用标识，参考：开发者注册及管理后台。 ELOSSOptions 阿里云OSS配置类，消息中的附件（音频、视频、图片等）是存储在阿里云OSS服务器上的。 属性 类型 描述 bucketName NSString 默认：celery-master endPoint NSString 默认：http://oss-cn-shenzhen.aliyuncs.com/ directoryName NSString 服务器上存储文件的一级目录名，默认：starRtc fileDirectoryName NSString 文件目录名（二级目录），默认：file imageDirectoryName NSString 图片目录名（二级目录），默认：images voiceDirectoryName NSString 语音目录名（二级目录），默认：voice videoDirectoryName NSString 视频目录名（二级目录），默认：video 1.3 API介绍 获取 SKD 实例 /** * 获取 SKD 实例 */ + (instancetype)sharedClient; /// 调用 ELClient *client = [ELClient sharedClient]; 初始化 SDK /** * 初始化 SDK，启动App时需要调用此方法 * * @param options 配置选项 */ - (void)initializeSDKWithOptions:(ELClientOptions *)options; /// 调用 [[ELClient sharedClient] initializeSDKWithOptions:o]; Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-05-26 "},"pages/sdk_login.html":{"url":"pages/sdk_login.html","title":"登录管理","keywords":"","body":" 登录 ELLoginManager 登录管理类，负责IM用户的注册、登录、登出以及监听登录状态相关的逻辑。 协议 ELLoginManagerDelegate 监听登录状态的协议 /** * 连接状态发生改变的回调 * * @param state 状态 */ - (void)connectionStateDidChange:(ELConnectionState)state; /** 登录状态失效的回调 */ - (void)loginStatusDidInvalid; API介绍 获取登录管理实例 SDK 内部已经将登录管理对象挂载到客户端实例上，因此外部无需再实例化登录管理类，直接通过客户端实例来获取。 /// 获取登录实例 ELLoginManager *login = [ELClient sharedClient].loginManager; 用户注册 /** * 用户注册 * * @param username 用户名 * @param password 密码（6~18位，字母+数字组合） * @param aCompletionBlock 完成的回调 */ - (void)registerWithUsername:(NSString *)username password:(NSString *)password completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].loginManager registerWithUsername:self.phoneF.text password:self.passwordF.text completion:^(NSError *aError) { if (aError) { NSLog(@\"注册失败\"); } else { NSLog(@\"注册成功\"); } }]; 注：SDK对注册用户的 密码 做了限制，密码长度在 6~18 位之间，并且只能是 数字 + 字母 的组合。 登录IM服务器 登录成功后，用户信息会被缓存在本地，可以通过 ELUserManager 类来获取当前登录的用户信息。 /** * 用户登录 * * @param username 用户名 * @param password 密码（6~18位，字母+数字组合） * @param aCompletionBlock 完成的回调 */ - (void)loginWithUsername:(NSString *)username password:(NSString *)password completion:(void (^)(NSString *userId, NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].loginManager loginWithUsername:@\"abc\" password:@\"abc123\" completion:^(NSString *userId, NSError *aError) { if (aError) { NSLog(@\"登录失败\"); } else { NSLog(@\"登录成功\"); } }]; 登出 退出登录后，SDK 会清空缓存在本地的用户数据。 /** * 退出登录 * * @param aCompletionBlock 回调 */ - (void)logout:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].loginManager logout:^(NSError *aError) { if (aError) { NSLog(@\"退出失败\"); } else { NSLog(@\"退出成功\"); } }]; 监听登录状态 /// 添加代理 - (void)addDelegate:(id)delegate; /// 移除代理 - (void)removeDelegate:(id)delegate; /// 调用 [[ELClient sharedClient].loginManager addDelegate:self]; [[ELClient sharedClient].loginManager removeDelegate:self]; Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-05-19 "},"pages/sdk_user.html":{"url":"pages/sdk_user.html","title":"用户管理","keywords":"","body":"用户管理 ELUserManager 管理当前登录用户相关的信息 API介绍 获取当前登录用户 /// 当前登录用户 @property (strong, nonatomic) ELUserInformation *currentUser; /// 调用 ELUserInformation *currentUser = [ELClient sharedClient].userManager.currentUser; 清空当前登录用户的缓存 当用户退出登录或者登录失效后，SDK 内部会自动调用此方法来清除本地的用户数据，外部不应该主动调用此方法。 /// 清空当前登录的用户（缓存的数据会被移除） - (void)clearCurrentUser; /// 调用 [[ELClient sharedClient].userManager clearCurrentUser]; 获取指定用户信息 此方法是用来获取指定用户的信息 /** * 获取用户信息 * * @param userId 用户ID * @param aCompletionBlock 回调 */ - (void)getUserInformation:(NSString *)userId completion:(void(^)(NSError *error, ELUserInformation *information))aCompletionBlock; /// 调用 [[ELClient sharedClient].userManager getUserInformation:@\"zhangsan\" completion:^(NSError *error, ELUserInformation *information) { if (!error) { NSLog(@\"请求成功\"); } else { NSLog(@\"请求成功\"); } }]; 修改当前用户信息 /** * 修改用户信息 * * @param avatar 头像地址（传 nil 则不做修改） * @param nickName 昵称（传 nil 则不做修改） * @param aCompletionBlock 回调 */ - (void)updateUserInformationWithAvatar:(NSString *)avatar nickName:(NSString *)nickName completion:(void(^)(NSError *error))aCompletionBlock; /// 调用 [[ELClient sharedClient].userManager updateUserInformationWithAvatar:nil nickName:@\"zhangsan\" completion:^(NSError *error) { if (!error) { NSLog(@\"修改成功\"); } else { NSLog(@\"修改失败\"); } }]; 发送邮箱验证码 /** * 验证码类型 */ typedef NS_ENUM(NSUInteger, ELVerificationCodeType) { /// IM修改密码 ELVerificationCodeTypeUpdatePassword = 4, /// 绑定邮箱 ELVerificationCodeTypeBindEmail = 6 }; /** * 发送邮箱验证码 * * @param email 邮箱 * @param type 验证码类型 * @param aCompletionBlock 回调 */ - (void)sendCodeToEmail:(NSString *)email type:(ELVerificationCodeType)type completion:(void(^)(NSError *error))aCompletionBlock; /// 调用 /// 发送邮箱验证码 - 绑定邮箱 [[ELClient sharedClient].userManager sendCodeToEmail:@\"xxx@xxx.com\" type:ELVerificationCodeTypeBindEmail completion:^(NSError *error) {}]; /// 发送邮箱验证码 - 修改密码 [[ELClient sharedClient].userManager sendCodeToEmail:@\"xxx@xxx.com\" type:ELVerificationCodeTypeUpdatePassword completion:^(NSError *error) {}]; 注：绑定邮箱 或者 修改密码 时，需要先调用此API来获取对应的验证码。 绑定邮箱 /** * 绑定邮箱 * * @param email 邮箱地址 * @param code 邮箱验证码 * @param aCompletionBlock 回调 */ - (void)bindEmail:(NSString *)email code:(NSString *)code completion:(void(^)(NSError *error))aCompletionBlock; /// 调用 [[ELClient sharedClient].userManager bindEmail:@\"xxx@xxx.com\" code:@\"8888\" completion:^(NSError *error) {}]; 修改密码 /** * 修改密码 * * @param newPassword 新密码（6~18位，字母+数字组合） * @param account 账号 * @param code 邮箱验证码 * @param aCompletionBlock 回调 */ - (void)updatePassword:(NSString *)newPassword account:(NSString *)account code:(NSString *)code completion:(void(^)(NSError *error))aCompletionBlock; /// 调用 [[ELClient sharedClient].userManager updatePassword:@\"abc123\" account:@\"zhangsan\" code:@\"8888\" completion:^(NSError *error) {}]; Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-05-19 "},"pages/sdk_contact.html":{"url":"pages/sdk_contact.html","title":"好友管理","keywords":"","body":"好友管理 ELContactManager 管理好友的基本功能，比如添加、移除代理，添加、删除好友等。 非好友关系的双方是不能进行单聊的。 协议 ELContactManagerDelegate 好友管理类的代理，用来监听接收好友请求、删除等回调。 /** * 用户B同意用户A的加好友请求后，用户A会收到这个回调 * * @param userId 用户B */ - (void)friendRequestDidApproveByUser:(NSString *)userId; /** * 用户B申请加A为好友后，用户A会收到这个回调 * * @param userId 用户B * @param message 消息 */ - (void)friendRequestDidReceiveFromUser:(NSString *)userId message:(NSString *)message; /** * 用户A解除与用户B的好友关系后，用户B会收到这个回调 * * @param userId 用户A */ - (void)friendDidRemoveByUser:(NSString *)userId; API介绍 获取好友列表 /** * 获取好友列表 * * @param aCompletionBlock 完成的回调 */ - (void)getContactsWithCompletion:(void (^)(NSArray *aList, NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].contactManager getContactsWithCompletion:^(NSArray *aList, NSError *aError) {}]; 注：好友数据都是从服务器上获取的，SDK 内部不会对好友数据做存储。 查找联系人 /** * 搜索联系人 * * @param username 用户名 * @param aCompletionBlock 完成的回调 */ - (void)searchContactWithUsername:(NSString *)username completion:(void (^)(NSArray *aList, NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].contactManager searchContactWithUsername:@\"zhangsan\" completion:^(NSArray *aList, NSError *aError) {}]; 添加好友 /** * 添加好友 * * @param userId 用户ID * @param aMessage 邀请信息 */ - (void)addContact:(NSString *)userId message:(NSString *)aMessage completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].contactManager addContact:@\"zhangsan\" message:text completion:^(NSError *aError) {}]; 删除好友 好友删除成功后，会删除与该好友之间的会话数据。 /** * 删除好友 * * @param userId 用户ID */ - (void)deleteContact:(NSString *)userId completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].contactManager deleteContact:@\"zhangsan\" completion:^(NSError *aError) {}]; 同意好友申请 /** * 同意好友申请 * * @param userId 用户ID */ - (void)approveFriendRequestFromUser:(NSString *)userId completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].contactManager approveFriendRequestFromUser:@\"zhangsan\" completion:^(NSError *aError) {}]; 添加好友管理代理 /// 添加代理 - (void)addDelegate:(id)aDelegate; /// 移除代理 - (void)removeDelegate:(id)aDelegate; /// 调用 [[ELClient sharedClient].contactManager addDelegate:self]; [[ELClient sharedClient].contactManager removeDelegate:self]; Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-05-19 "},"pages/sdk_chat.html":{"url":"pages/sdk_chat.html","title":"消息管理","keywords":"","body":"消息管理 ELChatManager 管理所有与聊天相关的逻辑，包括单聊和群聊消息的查询、发送、更新、删除的功能。 消息 ELMessage 消息：IM 交互的实体，由消息体（ ELMessageBody ）组成，目前的消息体的类型有：文本消息、图片消息、文件消息、语音消息、视频消息、音频通话、视频通话。 /** * 初始化消息实例 * * @param conversationId 会话ID（接收方的ID） * @param toName 接收方名称 * @param toAvatar 接收方头像 * @param body 消息体 * @param ext 拓展信息 */ - (instancetype)initWithConversationId:(NSString *)conversationId toName:(NSString *)toName toAvatar:(NSString *)toAvatar body:(ELMessageBody *)body ext:(NSDictionary *)ext; conversationId：会话 id，消息接收方的 id。如果是单聊，会话 id 就是对方的 userId，如果是群聊，会话 id 就是群的 groupId。 构造文本消息 /// 调用 ELTextMessageBody *body = [ELTextMessageBody new]; body.text = @\"要发送的消息\"; /// 生成消息 ELMessage *message = [[ELMessage alloc] initWithConversationId:@\"001\" toName:@\"zhangsan\" toAvatar:nil body:body ext:nil]; // 单聊 message.chatType = ELChatTypeChat; // 群聊 // message.chatType = ELChatTypeGroupChat; 构造图片消息 /*! * 初始化文件消息体（数据将会写入本地） * * @param aData 附件数据 * @param aDisplayName 附件显示名（不包含路径） * * @result 消息体实例 */ - (instancetype)initWithData:(NSData *)aData displayName:(NSString *)aDisplayName; /// 调用 ELImageMessageBody *body = [[ELImageMessageBody alloc] initWithData:aData displayName:@\"image.png\"]; /// 生成消息 ELMessage *message = [[ELMessage alloc] initWithConversationId:@\"001\" toName:@\"zhangsan\" toAvatar:nil body:body ext:nil]; // 单聊 message.chatType = ELChatTypeChat; // 群聊 // message.chatType = ELChatTypeGroupChat; 构造语音消息 /*! * 初始化文件消息体 * * @param aLocalPath 附件本地路径 * @param aDisplayName 附件显示名（不包含路径） * * @result 消息体实例 */ - (instancetype)initWithLocalPath:(NSString *)aLocalPath displayName:(NSString *)aDisplayName; /// 调用 ELVoiceMessageBody *body = [[ELVoiceMessageBody alloc] initWithLocalPath:@\"xxx/xxx.amr\" displayName:@\"audio\"]; // 语音时长，10 秒 body.duration = 10; /// 生成消息 ELMessage *message = [[ELMessage alloc] initWithConversationId:@\"001\" toName:@\"zhangsan\" toAvatar:nil body:body ext:nil]; // 单聊 message.chatType = ELChatTypeChat; // 群聊 // message.chatType = ELChatTypeGroupChat; 构造视频消息 /*! * 初始化文件消息体 * * @param aLocalPath 附件本地路径 * @param aDisplayName 附件显示名（不包含路径） * * @result 消息体实例 */ - (instancetype)initWithLocalPath:(NSString *)aLocalPath displayName:(NSString *)aDisplayName; /// 调用 ELVideoMessageBody *body = [[ELVideoMessageBody alloc] initWithLocalPath:@\"xxx/xxx.mp4\" displayName:@\"video.mp4\"]; /// 生成消息 ELMessage *message = [[ELMessage alloc] initWithConversationId:@\"001\" toName:@\"zhangsan\" toAvatar:nil body:body ext:nil]; // 单聊 message.chatType = ELChatTypeChat; // 群聊 // message.chatType = ELChatTypeGroupChat; 构造音频通话消息 /// 调用 ELAudioCallMessageBody *body = [ELAudioCallMessageBody new]; // 通话结束的原因 body.reason = ELCallEndReasonHangup; // 通话时长 body.duration = 10; /// 生成消息 ELMessage *message = [[ELMessage alloc] initWithConversationId:@\"001\" toName:@\"zhangsan\" toAvatar:nil body:body ext:nil]; // 单聊 message.chatType = ELChatTypeChat; // 群聊 // message.chatType = ELChatTypeGroupChat; 构造视频通话消息 /// 调用 ELVideoCallMessageBody *body = [ELVideoCallMessageBody new]; // 通话结束的原因 body.reason = ELCallEndReasonHangup; // 通话时长 body.duration = 10; /// 生成消息 ELMessage *message = [[ELMessage alloc] initWithConversationId:@\"001\" toName:@\"zhangsan\" toAvatar:nil body:body ext:nil]; // 单聊 message.chatType = ELChatTypeChat; // 群聊 // message.chatType = ELChatTypeGroupChat; 获取历史消息 /** * 获取指定会话的消息，如果数据库中不存在，则从服务器中取，按时间顺序 升序 排列（服务器中的数据会同步到本地数据库） * * @param conversationId 会话ID * @param page 第几页（从 1 开始） * @param size 每页显示的条数 */ - (void)getMessages:(NSString *)conversationId page:(NSInteger)page size:(NSInteger)size completion:(void(^)(NSArray *messages, NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].chatManager getMessages:@\"001\" page:1 size:10 completion:^(NSArray *messages, NSError *aError) {}]; 删除单条消息 /** * 删除某一条消息记录，数据将会从服务器和本地数据库中移除 * * @param messageId 消息ID * @param aCompletionBlock 完成的回调（回调结果以本地数据库的操作结果为准） */ - (void)removeMessage:(NSString *)messageId completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].chatManager removeMessages:@\"001\" completion:^(NSError *aError) {}]; 删除多条消息 /** * 删除某一条会话下的所有消息（会话记录不会被删除），数据将会从服务器和本地数据库中移除 * * @param conversationId 会话ID * @param aCompletionBlock 完成的回调（回调结果以本地数据库的操作结果为准） */ - (void)removeMessages:(NSString *)conversationId completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].chatManager removeMessages:@\"001\" completion:^(NSError *aError) {}]; 会话 ELConversation 会话：操作聊天消息 ELMessage 的容器，SDK 内部会对消息进行分类，将 conversationId 相同的消息归为一类，作为一条会话。每条会话中存储了最新的一条消息，以及该会话下所有未读消息的数量。 获取会话列表 /** * 获取当前用户的所有会话数据，会按照最新的那一条消息进行 降序 排列（聊天室的会话除外） */ - (void)getAllConversations:(void(^)(NSArray *conversations, NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].chatManager getAllConversations:^(NSArray *conversations, NSError *aError) {}]; 注：会话列表中不包含聊天室的会话消息。 删除会话 当会话被删除后，它底下的所有消息数据都会被删除。 /** * 删除某一条会话（同时会清空该会话中的所有消息记录），数据将会从服务器和本地数据库中移除 * * @param conversationId 会话ID * @param aCompletionBlock 完成的回调（回调结果以本地数据库的操作结果为准） */ - (void)removeConversation:(NSString *)conversationId completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].chatManager removeConversation:@\"001\" completion:^(NSError *aError) {}]; 获取单个会话的未读消息数 ELConversation *conversation = self.conversations[0]; // 未读数 NSInteger unreadMessagesCount = conversation.unreadMessagesCount; 获取所有会话的未读消息数 [[ELClient sharedClient].chatManager getAllConversations:^(NSArray *conversations, NSError *aError) { NSInteger unreadCount = 0; for (ELConversation *conversation in conversations) { unreadCount += conversation.unreadMessagesCount; } }]; 查询会话是否是好友会话 对于单聊而言，聊天双方必须是好友关系，才能进行聊天。 /** * 查询该会话是否是好友会话（只针对单聊） * * @param conversationId 会话ID */ - (void)getConversationFriendStatus:(NSString *)conversationId completion:(void (^)(BOOL isFriend, NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].chatManager getConversationFriendStatus:self.conversation.conversationId completion:^(BOOL isFriend, NSError *aError) { }]; 聊天 登录成功之后才能进行聊天操作。发消息时，单聊和群聊调用的是统一接口，区别只是消息的 chatType 不同。 发送消息 发送消息时，对于带附件的消息体（图片、语音、视频等），SDK 内部会自动将附件上传到服务器上。 /** * 发送消息，SDK内部会自动上传消息的附件（图片、视频、语音、文件） * * @param aMessage 消息实例 * @param aCompletionBlock 完成的回调 */ - (void)sendMessage:(ELMessage *)aMessage completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].chatManager sendMessage:message completion:^(NSError *aError) {}]; 接收消息 协议：ELChatManagerDelegate /** * 收到一条消息，消息会被写入数据库，对于图片、语音、视频、文件类的消息，文件数据会被缓存到本地 * * @param aMessages 消息 */ - (void)messageDidReceive:(ELMessage *)aMessages; 代理： // 添加代理 [[ELClient sharedClient].chatManager addDelegate:self]; // 移除代理 [[ELClient sharedClient].chatManager removeDelegate:self]; 上传消息附件 发送消息时，SDK 内部会自动上传消息的附件。如果不是特殊情况，外界不需要调用此方法。 /** * 上传附件到到服务器，上传完成后会同步更新 aMesage 对象 * * @param aMessage 消息对象 * @param progress 进度 * @param aCompletionBlock 回调 */ - (void)uploadMessageAttachment:(ELMessage *)aMessage progress:(ELFileProgressBlock)progress completion:(void (^)(NSError *error))aCompletionBlock; /// 调用 [[ELClient sharedClient].chatManager uploadMessageAttachment:message progress:nil completion:^(NSError *error) {}]; 下载消息附件 /** * 下载消息附件（语音，视频、文件），下载完成后会同步更新 aMesage 对象 * * @param aMessage 消息对象 * @param progress 进度 * @param aCompletionBlock 下载完成的回调 */ - (void)downloadMessageAttachment:(ELMessage *)aMessage progress:(ELFileProgressBlock)progress completion:(void (^)(NSError *error))aCompletionBlock; /// 调用 [[ELClient sharedClient].chatManager downloadMessageAttachment:message progress:nil completion:^(NSError *error) {}]; Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-05-19 "},"pages/sdk_group.html":{"url":"pages/sdk_group.html","title":"群组管理","keywords":"","body":"群管理 ELGroupManager 群实例 ELGroup 属性 类型 描述 groupId NSString 群id groupName NSString 群名称 owner NSString 群主id groupAvatar NSString 群头像 memberList ELUserInformation 群成员列表（包括群主） 协议 ELGroupManagerDelegate 群管理协议，用于监听群操作的回调。 /** * 当群被解散的通知，所有群成员会收到此回调（群主除外） * * @param groupId 群ID */ - (void)groupDidDissolution:(NSString *)groupId; /** * 自己被移出群组的通知（自己主动退群，不会收到此回调） * * @param aGroupId 群组ID */ - (void)userDidDeleteFromGroup:(NSString *)aGroupId; /** * 用户主动退群的通知（只有群主会收到此回调） * * @param aGroupId 群组ID */ - (void)userDidLeaveFromGroup:(NSString *)aGroupId; API介绍 获取群列表 /** * 获取用户已加入的群组 * * @param aCompletionBlock 完成的回调 */ - (void)getGroups:(void (^)(NSArray *aList, NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].groupManager getGroups:^(NSArray *aList, NSError *aError) {}]; 查询群详情 /** * 获取群组详情信息 * * @param aGroupId 群组ID * @param aCompletionBlock 完成的回调 */ - (void)getGroupDetailWithId:(NSString *)aGroupId completion:(void (^)(ELGroup *group, NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].groupManager getGroupDetailWithId:@\"001\" completion:^(ELGroup *group, NSError *aError) { }]; 创建群组 /** * 创建群组 * * @param groupName 群组名称（最多20位字符长度） * @param aCompletionBlock 完成的回调 */ - (void)createGroupWithGroupName:(NSString *)groupName completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].groupManager createGroupWithGroupName:@\"group01\" completion:^(NSError *aError) {}]; 注：群名称的字符长度 SDK 内部做了限制，必须在 20 个字符以内（包括 20 个字符）。 退出群组 /** * 退出群组，owner不能退出群，只能解散群（数据库中与本群相关的会话数据会被清除） * * @param aGroupId 群组ID * @param aCompletionBlock 完成的回调 */ - (void)leaveGroup:(NSString *)aGroupId completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].groupManager leaveGroup:@\"001\" completion:^(NSError *aError) {}]; 注：只有群成员可以退群，群主不能退群，只能解散群。操作成功后，SDK 内部会删除与本群相关的会话数据。 解散群组 /** * 解散群组, 需要owner权限（数据库中与本群相关的会话数据会被清除） * * @param aGroupId 群组ID * @param aCompletionBlock 完成的回调 */ - (void)destroyGroup:(NSString *)aGroupId completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].groupManager destroyGroup:@\"001\" completion:^(NSError *aError) { }]; 注：只能群主有权限解散群。群被解散后，群内的所有成员（群主除外）都会收到通知，同时 SDK 内部会删除与本群相关的会话数据。 添加群成员 /** * 添加群组成员 * * @param aUsers 被邀请的用户名列表 * @param aGroupId 群组ID * @param aCompletionBlock 完成的回调 */ - (void)addMembers:(NSArray *)aUsers toGroup:(NSString *)aGroupId completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].groupManager addMembers:memberList toGroup:@\"001\" completion:^(NSError *aError) {}]; 删除群成员 /** * 将群成员移出群组, 需要owner权限 * * @param aUsers 要移出群组的用户列表 * @param aGroupId 群组ID * @param aCompletionBlock 完成的回调 */ - (void)removeMembers:(NSArray *)aUsers fromGroup:(NSString *)aGroupId completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].groupManager removeMembers:memberList fromGroup:@\"001\" completion:^(NSError *aError) {}]; 注：只有群主有权限删除群成员，且群主不能删除自己。 修改群信息 /** * 修改群信息（群名称、头像），传空则表示不修改此项 * * @param aGroupId 群组ID * @param aGroupName 群名称 * @param aGroupAvatar 群头像 * @param aCompletionBlock 完成的回调 */ - (void)updateGroupWithId:(NSString *)aGroupId name:(NSString *)aGroupName avatar:(NSString *)aGroupAvatar completion:(void (^)(NSError *aError))aCompletionBlock; /// 调用 [[ELClient sharedClient].groupManager updateGroupWithId:@\"001\" name:@\"group02\" avatar:nil completion:^(NSError *aError) {}]; 注：只有群主有权限修改群信息。 添加群组管理代理 /// 添加代理 - (void)addDelegate:(id)aDelegate; /// 移除代理 - (void)removeDelegate:(id)aDelegate; /// 调用 [[ELClient sharedClient].groupManager addDelegate:self]; [[ELClient sharedClient].groupManager removeDelegate:self]; Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-05-21 "},"pages/sdk_voip.html":{"url":"pages/sdk_voip.html","title":"实时音视频","keywords":"","body":"实时音视频 ELCallManager 目前只支持1对1音视频通话，包括语音通话和视频通话。 通话配置 ELCallOptions 属性 类型 描述 openGLEnable BOOL 是否使用 openGL 渲染，默认 YES hwEncodeEnable BOOL 是否使用硬编码，默认 NO dynamicBitrateAndFPSEnable BOOL 是否动态调节帧率码率，默认 NO bigVideoBitrate int 大图码率，默认 500 bigVideoFPS int 大图帧率，默认 15 smallVideoBitrate int 小图码率，默认 100 smallVideoFPS int 小图帧率，默认 15 resolution ELCallVideoResolution 视频分辨率，默认 ELCallVideoResolution_360BW_640BH_180SW_320SH videoCodecType ELCallVideoCodecType 视频编码格式，默认 ELCallVideoCodecTypeH264 audioCodecType ELCallAudioCodecType 音频编码格式配置，默认 ELCallAudioCodecTypeAAC 协议 ELCallManagerDelegate 监听通话状态的回调。 /** * 用户A拨打用户B，用户B会收到这个回调 * * @param aMessage 消息对象 */ - (void)callDidReceive:(ELMessage *)aMessage; /** * 连接成功，双方都会收到此回调 * * @param aMessage 消息对象 */ - (void)callDidConnect:(ELMessage *)aMessage; /** * 通话关闭，双方都会收到此回调 * * @param aMessage 消息对象 */ - (void)callDidEnd:(ELMessage *)aMessage; API介绍 主叫方：通话发起方。 被叫方：通话接收方 主叫方调用 发起音视频通话 /** * 发起音视频通话 * * @param toId 接收人ID * @param type 通话类型 * @param aCompletionBlock 回调 */ - (void)call:(NSString *)toId type:(ELCallType)type completion:(void(^)(ELMessage *callSession, NSError *error))aCompletionBlock; /// 调用 // 语音通话 ELCallType type = ELCallTypeAudio; // 视频通话 // ELCallType type = ELCallTypeAudio; [[ELClient sharedClient].callManager call:@\"001\" type:type completion:nil]; 取消通话 /** * 取消通话 * * @param toId 接收人ID */ - (void)cancel:(NSString *)toId completion:(void(^)(NSError *error))aCompletionBlock; /// 调用 [[ELClient sharedClient].callManager cancel:@\"001\" completion:nil]; 注：取消通话指对方收到通话邀请后，还没有同意通话，主叫方就取消呼叫，即通话连接还没有完成。 被叫方调用 同意通话 /** * 同意通话 * * @param fromId 拨叫方ID */ - (void)accept:(NSString *)fromId completion:(void(^)(NSError *error))aCompletionBlock; /// 调用 [[ELClient sharedClient].callManager accept:@\"001\" completion:^(NSError *error) {}]; 拒绝通话 /** * 拒绝通话 * * @param fromId 拨叫方ID */ - (void)refuse:(NSString *)fromId completion:(void(^)(NSError *error))aCompletionBlock; /// 调用 [[ELClient sharedClient].callManager refuse:@\"001\" completion:nil]; 双方调用 挂断 /** * 挂断 * * @param callId 通话Id */ - (void)hangup:(NSString *)callId completion:(void(^)(NSError *error))completion; /// 调用 [[ELClient sharedClient].callManager hangup:@\"001\" completion:nil]; 注：挂断是指通话已经连接成功后，双方正常挂断通话。 其它API 添加通话管理代理 /// 添加代理 - (void)addDelegate:(id)aDelegate; /// 移除代理 - (void)removeDelegate:(id)aDelegate; /// 调用 [[ELClient sharedClient].callManager addDelegate:self]; [[ELClient sharedClient].callManager removeDelegate:self]; 配置通话参数 /// 切换摄像头方向，返回切换后的摄像头方向 - (ELCameraDirection)switchCamera; /// 开关音频 - (void)setAudioEnable:(BOOL)enable; /// 开关视频 - (void)setVideoEnable:(BOOL)enable; /// 设置主方和对方的视频画面 - (void)setupView:(UIView *)selfPreview targetView:(UIView *)targetView; /// 配置通话项 - (void)setCallOptions:(ELCallOptions *)options; 通话录制 SDK 提供了对通话过程进行录制的功能。 /** * 开始录制（目前只支持音频的录制） * * @param dirPath 录制的文件存储目录 */ - (void)startCallRecord:(NSString *)dirPath; /** * 停止录制（生成的是 wav 格式的音频文件） */ - (void)stopCallRecord:(void(^)(ELMessage *callSession, NSString *filePath, NSError *error))aCompletionBlock; 目前只支持音频的录制。 只能录制本方的音频数据。 生成的是 wav 格式的音频文件。 Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-05-19 "},"pages/sdk_update.html":{"url":"pages/sdk_update.html","title":"更新日志","keywords":"","body":"iOS SDK 更新日志 版本 V1.0.0 ElingIM 基础版本。 Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-05-19 "},"pages/sdk_download.html":{"url":"pages/sdk_download.html","title":"下载","keywords":"","body":"Demo 及 SDK 下载 SDK下载 Demo源码 Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-05-13 "}}